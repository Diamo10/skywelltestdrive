/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as AdminImport } from './routes/admin'
import { Route as UserImport } from './routes/_user'
import { Route as AdminIndexImport } from './routes/admin/index'
import { Route as UserIndexImport } from './routes/_user/index'
import { Route as AdminRegistrationsImport } from './routes/admin/registrations'
import { Route as UserVerifyImport } from './routes/_user/verify'
import { Route as UserSucessImport } from './routes/_user/sucess'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AdminRoute = AdminImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const UserRoute = UserImport.update({
  id: '/_user',
  getParentRoute: () => rootRoute,
} as any)

const AdminIndexRoute = AdminIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any)

const UserIndexRoute = UserIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => UserRoute,
} as any)

const AdminRegistrationsRoute = AdminRegistrationsImport.update({
  id: '/registrations',
  path: '/registrations',
  getParentRoute: () => AdminRoute,
} as any)

const UserVerifyRoute = UserVerifyImport.update({
  id: '/verify',
  path: '/verify',
  getParentRoute: () => UserRoute,
} as any)

const UserSucessRoute = UserSucessImport.update({
  id: '/sucess',
  path: '/sucess',
  getParentRoute: () => UserRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_user': {
      id: '/_user'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof UserImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_user/sucess': {
      id: '/_user/sucess'
      path: '/sucess'
      fullPath: '/sucess'
      preLoaderRoute: typeof UserSucessImport
      parentRoute: typeof UserImport
    }
    '/_user/verify': {
      id: '/_user/verify'
      path: '/verify'
      fullPath: '/verify'
      preLoaderRoute: typeof UserVerifyImport
      parentRoute: typeof UserImport
    }
    '/admin/registrations': {
      id: '/admin/registrations'
      path: '/registrations'
      fullPath: '/admin/registrations'
      preLoaderRoute: typeof AdminRegistrationsImport
      parentRoute: typeof AdminImport
    }
    '/_user/': {
      id: '/_user/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof UserIndexImport
      parentRoute: typeof UserImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexImport
      parentRoute: typeof AdminImport
    }
  }
}

// Create and export the route tree

interface UserRouteChildren {
  UserSucessRoute: typeof UserSucessRoute
  UserVerifyRoute: typeof UserVerifyRoute
  UserIndexRoute: typeof UserIndexRoute
}

const UserRouteChildren: UserRouteChildren = {
  UserSucessRoute: UserSucessRoute,
  UserVerifyRoute: UserVerifyRoute,
  UserIndexRoute: UserIndexRoute,
}

const UserRouteWithChildren = UserRoute._addFileChildren(UserRouteChildren)

interface AdminRouteChildren {
  AdminRegistrationsRoute: typeof AdminRegistrationsRoute
  AdminIndexRoute: typeof AdminIndexRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminRegistrationsRoute: AdminRegistrationsRoute,
  AdminIndexRoute: AdminIndexRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof UserRouteWithChildren
  '/admin': typeof AdminRouteWithChildren
  '/login': typeof LoginRoute
  '/sucess': typeof UserSucessRoute
  '/verify': typeof UserVerifyRoute
  '/admin/registrations': typeof AdminRegistrationsRoute
  '/': typeof UserIndexRoute
  '/admin/': typeof AdminIndexRoute
}

export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/sucess': typeof UserSucessRoute
  '/verify': typeof UserVerifyRoute
  '/admin/registrations': typeof AdminRegistrationsRoute
  '/': typeof UserIndexRoute
  '/admin': typeof AdminIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_user': typeof UserRouteWithChildren
  '/admin': typeof AdminRouteWithChildren
  '/login': typeof LoginRoute
  '/_user/sucess': typeof UserSucessRoute
  '/_user/verify': typeof UserVerifyRoute
  '/admin/registrations': typeof AdminRegistrationsRoute
  '/_user/': typeof UserIndexRoute
  '/admin/': typeof AdminIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/admin'
    | '/login'
    | '/sucess'
    | '/verify'
    | '/admin/registrations'
    | '/'
    | '/admin/'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/sucess' | '/verify' | '/admin/registrations' | '/' | '/admin'
  id:
    | '__root__'
    | '/_user'
    | '/admin'
    | '/login'
    | '/_user/sucess'
    | '/_user/verify'
    | '/admin/registrations'
    | '/_user/'
    | '/admin/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  UserRoute: typeof UserRouteWithChildren
  AdminRoute: typeof AdminRouteWithChildren
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  UserRoute: UserRouteWithChildren,
  AdminRoute: AdminRouteWithChildren,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_user",
        "/admin",
        "/login"
      ]
    },
    "/_user": {
      "filePath": "_user.tsx",
      "children": [
        "/_user/sucess",
        "/_user/verify",
        "/_user/"
      ]
    },
    "/admin": {
      "filePath": "admin.tsx",
      "children": [
        "/admin/registrations",
        "/admin/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_user/sucess": {
      "filePath": "_user/sucess.tsx",
      "parent": "/_user"
    },
    "/_user/verify": {
      "filePath": "_user/verify.tsx",
      "parent": "/_user"
    },
    "/admin/registrations": {
      "filePath": "admin/registrations.tsx",
      "parent": "/admin"
    },
    "/_user/": {
      "filePath": "_user/index.tsx",
      "parent": "/_user"
    },
    "/admin/": {
      "filePath": "admin/index.tsx",
      "parent": "/admin"
    }
  }
}
ROUTE_MANIFEST_END */

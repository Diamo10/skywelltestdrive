/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as VerifyImport } from './routes/verify'
import { Route as SucessImport } from './routes/sucess'
import { Route as AdminImport } from './routes/admin'
import { Route as IndexImport } from './routes/index'
import { Route as AdminIndexImport } from './routes/admin/index'
import { Route as AdminRegistrationsImport } from './routes/admin/registrations'

// Create/Update Routes

const VerifyRoute = VerifyImport.update({
  id: '/verify',
  path: '/verify',
  getParentRoute: () => rootRoute,
} as any)

const SucessRoute = SucessImport.update({
  id: '/sucess',
  path: '/sucess',
  getParentRoute: () => rootRoute,
} as any)

const AdminRoute = AdminImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AdminIndexRoute = AdminIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any)

const AdminRegistrationsRoute = AdminRegistrationsImport.update({
  id: '/registrations',
  path: '/registrations',
  getParentRoute: () => AdminRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminImport
      parentRoute: typeof rootRoute
    }
    '/sucess': {
      id: '/sucess'
      path: '/sucess'
      fullPath: '/sucess'
      preLoaderRoute: typeof SucessImport
      parentRoute: typeof rootRoute
    }
    '/verify': {
      id: '/verify'
      path: '/verify'
      fullPath: '/verify'
      preLoaderRoute: typeof VerifyImport
      parentRoute: typeof rootRoute
    }
    '/admin/registrations': {
      id: '/admin/registrations'
      path: '/registrations'
      fullPath: '/admin/registrations'
      preLoaderRoute: typeof AdminRegistrationsImport
      parentRoute: typeof AdminImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexImport
      parentRoute: typeof AdminImport
    }
  }
}

// Create and export the route tree

interface AdminRouteChildren {
  AdminRegistrationsRoute: typeof AdminRegistrationsRoute
  AdminIndexRoute: typeof AdminIndexRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminRegistrationsRoute: AdminRegistrationsRoute,
  AdminIndexRoute: AdminIndexRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/sucess': typeof SucessRoute
  '/verify': typeof VerifyRoute
  '/admin/registrations': typeof AdminRegistrationsRoute
  '/admin/': typeof AdminIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/sucess': typeof SucessRoute
  '/verify': typeof VerifyRoute
  '/admin/registrations': typeof AdminRegistrationsRoute
  '/admin': typeof AdminIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/sucess': typeof SucessRoute
  '/verify': typeof VerifyRoute
  '/admin/registrations': typeof AdminRegistrationsRoute
  '/admin/': typeof AdminIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/sucess'
    | '/verify'
    | '/admin/registrations'
    | '/admin/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/sucess' | '/verify' | '/admin/registrations' | '/admin'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/sucess'
    | '/verify'
    | '/admin/registrations'
    | '/admin/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
  SucessRoute: typeof SucessRoute
  VerifyRoute: typeof VerifyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  SucessRoute: SucessRoute,
  VerifyRoute: VerifyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/admin",
        "/sucess",
        "/verify"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/admin": {
      "filePath": "admin.tsx",
      "children": [
        "/admin/registrations",
        "/admin/"
      ]
    },
    "/sucess": {
      "filePath": "sucess.tsx"
    },
    "/verify": {
      "filePath": "verify.tsx"
    },
    "/admin/registrations": {
      "filePath": "admin/registrations.tsx",
      "parent": "/admin"
    },
    "/admin/": {
      "filePath": "admin/index.tsx",
      "parent": "/admin"
    }
  }
}
ROUTE_MANIFEST_END */
